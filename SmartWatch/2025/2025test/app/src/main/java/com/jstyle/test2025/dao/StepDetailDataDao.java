package com.jstyle.test2025.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jstyle.test2025.model.StepDetailData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_DETAIL_DATA".
*/
public class StepDetailDataDao extends AbstractDao<StepDetailData, String> {

    public static final String TABLENAME = "STEP_DETAIL_DATA";

    /**
     * Properties of entity StepDetailData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property Step = new Property(1, String.class, "step", false, "STEP");
        public final static Property Cal = new Property(2, String.class, "cal", false, "CAL");
        public final static Property Distance = new Property(3, String.class, "distance", false, "DISTANCE");
        public final static Property Date = new Property(4, String.class, "date", true, "DATE");
        public final static Property MinterStep = new Property(5, String.class, "MinterStep", false, "MINTER_STEP");
    }


    public StepDetailDataDao(DaoConfig config) {
        super(config);
    }
    
    public StepDetailDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_DETAIL_DATA\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"STEP\" TEXT," + // 1: step
                "\"CAL\" TEXT," + // 2: cal
                "\"DISTANCE\" TEXT," + // 3: distance
                "\"DATE\" TEXT PRIMARY KEY NOT NULL ," + // 4: date
                "\"MINTER_STEP\" TEXT);"); // 5: MinterStep
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_DETAIL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepDetailData entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String step = entity.getStep();
        if (step != null) {
            stmt.bindString(2, step);
        }
 
        String cal = entity.getCal();
        if (cal != null) {
            stmt.bindString(3, cal);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(4, distance);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String MinterStep = entity.getMinterStep();
        if (MinterStep != null) {
            stmt.bindString(6, MinterStep);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepDetailData entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String step = entity.getStep();
        if (step != null) {
            stmt.bindString(2, step);
        }
 
        String cal = entity.getCal();
        if (cal != null) {
            stmt.bindString(3, cal);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(4, distance);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String MinterStep = entity.getMinterStep();
        if (MinterStep != null) {
            stmt.bindString(6, MinterStep);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public StepDetailData readEntity(Cursor cursor, int offset) {
        StepDetailData entity = new StepDetailData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // step
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cal
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // distance
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // MinterStep
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepDetailData entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStep(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistance(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinterStep(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StepDetailData entity, long rowId) {
        return entity.getDate();
    }
    
    @Override
    public String getKey(StepDetailData entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepDetailData entity) {
        return entity.getDate() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
