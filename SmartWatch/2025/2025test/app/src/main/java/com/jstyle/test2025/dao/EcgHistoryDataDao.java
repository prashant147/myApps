package com.jstyle.test2025.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jstyle.test2025.model.EcgHistoryData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ECG_HISTORY_DATA".
*/
public class EcgHistoryDataDao extends AbstractDao<EcgHistoryData, Void> {

    public static final String TABLENAME = "ECG_HISTORY_DATA";

    /**
     * Properties of entity EcgHistoryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Hrv = new Property(2, int.class, "hrv", false, "HRV");
        public final static Property Pressure = new Property(3, int.class, "pressure", false, "PRESSURE");
        public final static Property HighBloodPressure = new Property(4, int.class, "highBloodPressure", false, "HIGH_BLOOD_PRESSURE");
        public final static Property LowBloodPressure = new Property(5, int.class, "lowBloodPressure", false, "LOW_BLOOD_PRESSURE");
        public final static Property HeartRate = new Property(6, int.class, "heartRate", false, "HEART_RATE");
        public final static Property BloodValue = new Property(7, int.class, "bloodValue", false, "BLOOD_VALUE");
        public final static Property BreathValue = new Property(8, int.class, "breathValue", false, "BREATH_VALUE");
        public final static Property MoodValue = new Property(9, int.class, "moodValue", false, "MOOD_VALUE");
        public final static Property FileName = new Property(10, long.class, "fileName", false, "FILE_NAME");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property ArrayECGData = new Property(12, String.class, "arrayECGData", false, "ARRAY_ECGDATA");
    }


    public EcgHistoryDataDao(DaoConfig config) {
        super(config);
    }
    
    public EcgHistoryDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ECG_HISTORY_DATA\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"TIME\" TEXT," + // 1: time
                "\"HRV\" INTEGER NOT NULL ," + // 2: hrv
                "\"PRESSURE\" INTEGER NOT NULL ," + // 3: pressure
                "\"HIGH_BLOOD_PRESSURE\" INTEGER NOT NULL ," + // 4: highBloodPressure
                "\"LOW_BLOOD_PRESSURE\" INTEGER NOT NULL ," + // 5: lowBloodPressure
                "\"HEART_RATE\" INTEGER NOT NULL ," + // 6: heartRate
                "\"BLOOD_VALUE\" INTEGER NOT NULL ," + // 7: bloodValue
                "\"BREATH_VALUE\" INTEGER NOT NULL ," + // 8: breathValue
                "\"MOOD_VALUE\" INTEGER NOT NULL ," + // 9: moodValue
                "\"FILE_NAME\" INTEGER NOT NULL ," + // 10: fileName
                "\"ADDRESS\" TEXT," + // 11: address
                "\"ARRAY_ECGDATA\" TEXT);"); // 12: arrayECGData
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ECG_HISTORY_DATA_TIME_DESC_ADDRESS_DESC ON \"ECG_HISTORY_DATA\"" +
                " (\"TIME\" DESC,\"ADDRESS\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ECG_HISTORY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EcgHistoryData entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getHrv());
        stmt.bindLong(4, entity.getPressure());
        stmt.bindLong(5, entity.getHighBloodPressure());
        stmt.bindLong(6, entity.getLowBloodPressure());
        stmt.bindLong(7, entity.getHeartRate());
        stmt.bindLong(8, entity.getBloodValue());
        stmt.bindLong(9, entity.getBreathValue());
        stmt.bindLong(10, entity.getMoodValue());
        stmt.bindLong(11, entity.getFileName());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String arrayECGData = entity.getArrayECGData();
        if (arrayECGData != null) {
            stmt.bindString(13, arrayECGData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EcgHistoryData entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getHrv());
        stmt.bindLong(4, entity.getPressure());
        stmt.bindLong(5, entity.getHighBloodPressure());
        stmt.bindLong(6, entity.getLowBloodPressure());
        stmt.bindLong(7, entity.getHeartRate());
        stmt.bindLong(8, entity.getBloodValue());
        stmt.bindLong(9, entity.getBreathValue());
        stmt.bindLong(10, entity.getMoodValue());
        stmt.bindLong(11, entity.getFileName());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String arrayECGData = entity.getArrayECGData();
        if (arrayECGData != null) {
            stmt.bindString(13, arrayECGData);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EcgHistoryData readEntity(Cursor cursor, int offset) {
        EcgHistoryData entity = new EcgHistoryData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.getInt(offset + 2), // hrv
            cursor.getInt(offset + 3), // pressure
            cursor.getInt(offset + 4), // highBloodPressure
            cursor.getInt(offset + 5), // lowBloodPressure
            cursor.getInt(offset + 6), // heartRate
            cursor.getInt(offset + 7), // bloodValue
            cursor.getInt(offset + 8), // breathValue
            cursor.getInt(offset + 9), // moodValue
            cursor.getLong(offset + 10), // fileName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // arrayECGData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EcgHistoryData entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHrv(cursor.getInt(offset + 2));
        entity.setPressure(cursor.getInt(offset + 3));
        entity.setHighBloodPressure(cursor.getInt(offset + 4));
        entity.setLowBloodPressure(cursor.getInt(offset + 5));
        entity.setHeartRate(cursor.getInt(offset + 6));
        entity.setBloodValue(cursor.getInt(offset + 7));
        entity.setBreathValue(cursor.getInt(offset + 8));
        entity.setMoodValue(cursor.getInt(offset + 9));
        entity.setFileName(cursor.getLong(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setArrayECGData(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EcgHistoryData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EcgHistoryData entity) {
        return null;
    }

    @Override
    public boolean hasKey(EcgHistoryData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
